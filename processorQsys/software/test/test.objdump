
test.elf:     file format elf32-littlenios2
test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010180

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00000cf0 memsz 0x00000cf0 flags r-x
    LOAD off    0x00002000 vaddr 0x00000000 paddr 0x00010d10 align 2**12
         filesz 0x00000054 memsz 0x000001b4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000b90  00010180  00010180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000038  00000000  00010d10  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000001c  00000038  00010d48  00002038  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00000054  00010d64  00002054  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  000001b4  000001b4  00002054  2**0
                  CONTENTS
  7 .ROM          00000000  00010d64  00010d64  00002054  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00002054  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000278  00000000  00000000  00002078  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00001f29  00000000  00000000  000022f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000e12  00000000  00000000  00004219  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00000cd5  00000000  00000000  0000502b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000368  00000000  00000000  00005d00  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000ec0  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000fd2  00000000  00000000  00006f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00007efc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000001a8  00000000  00000000  00007f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0000948a  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0000948d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00009490  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00009491  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000004  00000000  00000000  00009492  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000004  00000000  00000000  00009496  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000004  00000000  00000000  0000949a  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000008  00000000  00000000  0000949e  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000024  00000000  00000000  000094a6  2**0
                  CONTENTS, READONLY
 27 .jdi          000001ef  00000000  00000000  000094ca  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00087ebb  00000000  00000000  000096b9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010180 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
00000038 l    d  .rwdata	00000000 .rwdata
00000054 l    d  .bss	00000000 .bss
000001b4 l    d  .RAM	00000000 .RAM
00010d64 l    d  .ROM	00000000 .ROM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test_bsp//obj/HAL/src/crt0.o
000101b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
0000004c l     O .rwdata	00000004 display1
00000048 l     O .rwdata	00000004 display2
00000044 l     O .rwdata	00000004 display3
00000040 l     O .rwdata	00000004 display4
0000003c l     O .rwdata	00000004 display5
000103bc l     F .text	00000470 run_isr
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
000000a4 g     O .bss	00000004 alt_instruction_exception_handler
00010c3c g     F .text	0000002c alt_main
000000b4 g     O .bss	00000100 alt_irq
00010d48 g       *ABS*	00000000 __flash_rwdata_start
000101bc g     F .text	00000014 mod_pow
00000078 g     O .bss	00000004 digit4
0000006c g     O .bss	00000004 modulo
00010d08 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
000000a8 g     O .bss	00000009 hex_final
0000009c g     O .bss	00000004 alt_argv
00008038 g       *ABS*	00000000 _gp
00010a40 g     F .text	00000028 memcpy
00010c94 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00000088 g     O .bss	00000002 hex_c
00000058 g     O .bss	00000004 fourth
0001095c g     F .text	00000064 .hidden __udivsi3
0000008a g     O .bss	00000002 hex_a
00000060 g     O .bss	00000004 second
000001b4 g       *ABS*	00000000 __bss_end
00010af4 g     F .text	00000068 alt_iic_isr_register
00010000 g       *ABS*	00000000 __alt_mem_ROM
00010adc g     F .text	00000018 alt_ic_irq_enabled
0000008c g     O .bss	00000002 hex_d
00000094 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
00010c8c g     F .text	00000004 alt_dcache_flush_all
0000008e g     O .bss	00000002 hex_e
00000054 g       *ABS*	00000000 __ram_rwdata_end
00000038 g       *ABS*	00000000 __ram_rodata_end
00000070 g     O .bss	00000004 exponente
000102ac g     F .text	00000014 sumarDisplay
000109c0 g     F .text	00000058 .hidden __umodsi3
00000090 g     O .bss	00000002 hex_b
000001b4 g       *ABS*	00000000 end
00000074 g     O .bss	00000004 digit5
0001015c g     F .exceptions	00000024 alt_instruction_exception_entry
00010000 g       *ABS*	00000000 __alt_stack_pointer
00010180 g     F .text	0000003c _start
00010c88 g     F .text	00000004 alt_sys_init
00010a18 g     F .text	00000028 .hidden __mulsi3
00000038 g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
00000054 g     O .bss	00000004 expModIndex
00010224 g     F .text	00000018 obtenerDato
000001b4 g       *ABS*	00000000 __alt_stack_base
00000080 g     O .bss	00000004 digit2
00000038 g     O .rwdata	00000004 index
00000054 g       *ABS*	00000000 __bss_start
0001082c g     F .text	00000038 main
00000000 g       *ABS*	00000000 __alt_mem_RAM
00010244 g     F .text	00000024 RSA
00000098 g     O .bss	00000004 alt_envp
0000007c g     O .bss	00000004 digit3
00010864 g     F .text	00000084 .hidden __divsi3
00010d10 g       *ABS*	00000000 __flash_rodata_start
00010298 g     F .text	00000014 cambiarDisplay
00010c68 g     F .text	00000020 alt_irq_init
00010268 g     F .text	00000030 resetData
00000068 g     O .bss	00000004 sevensegChange
000000a0 g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
000101d0 g     F .text	00000054 actualizarDatos
00010020 g       *ABS*	00000000 __ram_exceptions_start
0000005c g     O .bss	00000004 third
00010a68 g     F .text	00000004 alt_ic_isr_register
00000064 g     O .bss	00000004 first
00000054 g       *ABS*	00000000 _edata
000001b4 g       *ABS*	00000000 _end
00010180 g       *ABS*	00000000 __ram_exceptions_end
00000084 g     O .bss	00000004 suma
00010aa4 g     F .text	00000038 alt_ic_irq_disable
000108e8 g     F .text	00000074 .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
0001000c g       .entry	00000000 _exit
00010c90 g     F .text	00000004 alt_icache_flush_all
00000050 g     O .rwdata	00000004 alt_priority_mask
00010a6c g     F .text	00000038 alt_ic_irq_enable
000102c0 g     F .text	000000fc displayShow
00010b5c g     F .text	000000e0 alt_load
0001023c g     F .text	00000008 incrementarIndex



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406014 	ori	at,at,384
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1010c:	04000034 	movhi	r16,0
   10110:	84002d04 	addi	r16,r16,180

  active = alt_irq_pending ();

  do
  {
    i = 0;
   10114:	0005883a 	mov	r2,zero
    mask = 1;
   10118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	20ca703a 	and	r5,r4,r3
   10120:	28000b26 	beq	r5,zero,10150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   10124:	100490fa 	slli	r2,r2,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1013c:	203ff51e 	bne	r4,zero,10114 <__flash_rwdata_start+0xfffff3cc>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10150:	18c7883a 	add	r3,r3,r3
      i++;
   10154:	10800044 	addi	r2,r2,1

    } while (1);
   10158:	003ff006 	br	1011c <__flash_rwdata_start+0xfffff3d4>

0001015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   1015c:	d0a01b17 	ldw	r2,-32660(gp)
   10160:	10000426 	beq	r2,zero,10174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10164:	200b883a 	mov	r5,r4
   10168:	000d883a 	mov	r6,zero
   1016c:	013fffc4 	movi	r4,-1
   10170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10178:	0005883a 	mov	r2,zero
   1017c:	f800283a 	ret

Disassembly of section .text:

00010180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10180:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
   1018c:	d6a00e14 	ori	gp,gp,32824
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
   10194:	10801514 	ori	r2,r2,84

    movhi r3, %hi(__bss_end)
   10198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
   1019c:	18c06d14 	ori	r3,r3,436

    beq r2, r3, 1f
   101a0:	10c00326 	beq	r2,r3,101b0 <_start+0x30>

0:
    stw zero, (r2)
   101a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101ac:	10fffd36 	bltu	r2,r3,101a4 <__flash_rwdata_start+0xfffff45c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101b0:	0010b5c0 	call	10b5c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101b4:	0010c3c0 	call	10c3c <alt_main>

000101b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101b8:	003fff06 	br	101b8 <__flash_rwdata_start+0xfffff470>

000101bc <mod_pow>:



int mod_pow(int base, int exp, int  mod) {
    int result = 1;
    while (exp > 0) {
   101bc:	0140020e 	bge	zero,r5,101c8 <mod_pow+0xc>
        if (exp % 2 == 1) {
            result = (result * base) % mod;
        }
        base = (base * base) % mod;
        exp /= 2;
   101c0:	280bd07a 	srai	r5,r5,1
   101c4:	003ffd06 	br	101bc <__flash_rwdata_start+0xfffff474>
    }
    return 666;
}
   101c8:	0080a684 	movi	r2,666
   101cc:	f800283a 	ret

000101d0 <actualizarDatos>:
void actualizarDatos(){
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG0_BASE, display1);
   101d0:	d0e00517 	ldw	r3,-32748(gp)
   101d4:	00800074 	movhi	r2,1
   101d8:	10903c04 	addi	r2,r2,16624
   101dc:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG1_BASE, display2);
   101e0:	d0e00417 	ldw	r3,-32752(gp)
   101e4:	00800074 	movhi	r2,1
   101e8:	10903804 	addi	r2,r2,16608
   101ec:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG2_BASE, display3);
   101f0:	d0e00317 	ldw	r3,-32756(gp)
   101f4:	00800074 	movhi	r2,1
   101f8:	10903404 	addi	r2,r2,16592
   101fc:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG3_BASE, display4);
   10200:	d0e00217 	ldw	r3,-32760(gp)
   10204:	00800074 	movhi	r2,1
   10208:	10903004 	addi	r2,r2,16576
   1020c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG4_BASE, display5);
   10210:	d0e00117 	ldw	r3,-32764(gp)
   10214:	00800074 	movhi	r2,1
   10218:	10902c04 	addi	r2,r2,16560
   1021c:	10c00035 	stwio	r3,0(r2)
   10220:	f800283a 	ret

00010224 <obtenerDato>:
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG4_BASE, display5);
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
}
int obtenerDato(int dataTmp[]){
	int dato=1;
	dato=dataTmp[index];
   10224:	d0a00017 	ldw	r2,-32768(gp)
   10228:	1085883a 	add	r2,r2,r2
   1022c:	1085883a 	add	r2,r2,r2
   10230:	2089883a 	add	r4,r4,r2
	return dato;
}
   10234:	20800017 	ldw	r2,0(r4)
   10238:	f800283a 	ret

0001023c <incrementarIndex>:
int incrementarIndex(int index){
	index+=1;
	return index;
}
   1023c:	20800044 	addi	r2,r4,1
   10240:	f800283a 	ret

00010244 <RSA>:
int RSA(long long exponenteTmp, long long moduloTmp, long long data[])
{
   10244:	00800304 	movi	r2,12
    int size = sizeof(data) / sizeof(data[0]);
    long long valor_descencriptado = 1;
    for (int i = 0; i < 12 ; i++)
    {
        valor_descencriptado = mod_pow(data[i],exponenteTmp, moduloTmp);
   10248:	2007883a 	mov	r3,r4



int mod_pow(int base, int exp, int  mod) {
    int result = 1;
    while (exp > 0) {
   1024c:	00c0020e 	bge	zero,r3,10258 <RSA+0x14>
        if (exp % 2 == 1) {
            result = (result * base) % mod;
        }
        base = (base * base) % mod;
        exp /= 2;
   10250:	1807d07a 	srai	r3,r3,1
   10254:	003ffd06 	br	1024c <__flash_rwdata_start+0xfffff504>
   10258:	10bfffc4 	addi	r2,r2,-1
}
int RSA(long long exponenteTmp, long long moduloTmp, long long data[])
{
    int size = sizeof(data) / sizeof(data[0]);
    long long valor_descencriptado = 1;
    for (int i = 0; i < 12 ; i++)
   1025c:	103ffa1e 	bne	r2,zero,10248 <__flash_rwdata_start+0xfffff500>
    {
        valor_descencriptado = mod_pow(data[i],exponenteTmp, moduloTmp);
    }
    return valor_descencriptado;
}
   10260:	0080a684 	movi	r2,666
   10264:	f800283a 	ret

00010268 <resetData>:
	suma=0;
	digit2=0;
	digit3=0;
	digit4=0;
	digit5=0;
	display1=64;
   10268:	00801004 	movi	r2,64
    return valor_descencriptado;
}


void resetData(){
	suma=0;
   1026c:	d0201315 	stw	zero,-32692(gp)
	digit2=0;
   10270:	d0201215 	stw	zero,-32696(gp)
	digit3=0;
   10274:	d0201115 	stw	zero,-32700(gp)
	digit4=0;
   10278:	d0201015 	stw	zero,-32704(gp)
	digit5=0;
   1027c:	d0200f15 	stw	zero,-32708(gp)
	display1=64;
   10280:	d0a00515 	stw	r2,-32748(gp)
	display2=64;
   10284:	d0a00415 	stw	r2,-32752(gp)
	display3=64;
   10288:	d0a00315 	stw	r2,-32756(gp)
	display4=64;
   1028c:	d0a00215 	stw	r2,-32760(gp)
	display5=64;
   10290:	d0a00115 	stw	r2,-32764(gp)
   10294:	f800283a 	ret

00010298 <cambiarDisplay>:
}

int cambiarDisplay(int display_num){
	display_num+=1;
   10298:	20800044 	addi	r2,r4,1
	if(display_num == 5){
   1029c:	00c00144 	movi	r3,5
   102a0:	10c0011e 	bne	r2,r3,102a8 <cambiarDisplay+0x10>
		display_num=0;
   102a4:	0005883a 	mov	r2,zero
	}
	return display_num;
}
   102a8:	f800283a 	ret

000102ac <sumarDisplay>:
int sumarDisplay(int sumaTmp){
	sumaTmp+=1;
   102ac:	20800044 	addi	r2,r4,1
	if(sumaTmp==16){
   102b0:	00c00404 	movi	r3,16
   102b4:	10c0011e 	bne	r2,r3,102bc <sumarDisplay+0x10>
		sumaTmp=0;
   102b8:	0005883a 	mov	r2,zero
	}
	return sumaTmp;
}
   102bc:	f800283a 	ret

000102c0 <displayShow>:
int displayShow(int suma1,int display){
   102c0:	2805883a 	mov	r2,r5
	if (suma1 == 0) {
   102c4:	20001f26 	beq	r4,zero,10344 <displayShow+0x84>
	    display = 64;
	} else if (suma1 == 1) {
   102c8:	00c00044 	movi	r3,1
   102cc:	20c01f26 	beq	r4,r3,1034c <displayShow+0x8c>
	    display = 121;
	} else if (suma1 == 2) {
   102d0:	00c00084 	movi	r3,2
   102d4:	20c01f26 	beq	r4,r3,10354 <displayShow+0x94>
	    display = 36;
	} else if (suma1 == 3) {
   102d8:	014000c4 	movi	r5,3
   102dc:	21401f26 	beq	r4,r5,1035c <displayShow+0x9c>
	    display = 48;
	} else if (suma1 == 4) {
   102e0:	01400104 	movi	r5,4
   102e4:	21401f26 	beq	r4,r5,10364 <displayShow+0xa4>
	    display = 25;
	} else if (suma1 == 5) {
   102e8:	01400144 	movi	r5,5
   102ec:	21401f26 	beq	r4,r5,1036c <displayShow+0xac>
	    display = 18;
	} else if (suma1 == 6) {
   102f0:	01400184 	movi	r5,6
   102f4:	21401f26 	beq	r4,r5,10374 <displayShow+0xb4>
	    display = 2;
	} else if (suma1 == 7) {
   102f8:	00c001c4 	movi	r3,7
   102fc:	20c01f26 	beq	r4,r3,1037c <displayShow+0xbc>
	    display = 120;
	} else if (suma1 == 8) {
   10300:	00c00204 	movi	r3,8
   10304:	20c01f26 	beq	r4,r3,10384 <displayShow+0xc4>
	    display = 0;
	} else if (suma1 == 9 ) {
   10308:	00c00244 	movi	r3,9
   1030c:	20c01f26 	beq	r4,r3,1038c <displayShow+0xcc>
	    display = 24;
	}else if (suma1 == 10 ) { //A
   10310:	00c00284 	movi	r3,10
   10314:	20c01f26 	beq	r4,r3,10394 <displayShow+0xd4>
	    display = 8;
	}else if (suma1 == 11 ) { //B
   10318:	00c002c4 	movi	r3,11
   1031c:	20c01f26 	beq	r4,r3,1039c <displayShow+0xdc>
	    display = 3;
	}else if (suma1 == 12 ) { //C
   10320:	00c00304 	movi	r3,12
   10324:	20c01f26 	beq	r4,r3,103a4 <displayShow+0xe4>
	    display = 70;
	}else if (suma1 == 13 ) { //D
   10328:	00c00344 	movi	r3,13
   1032c:	20c01f26 	beq	r4,r3,103ac <displayShow+0xec>
	    display = 33;
	}else if (suma1 == 14 ) { //E
   10330:	00c00384 	movi	r3,14
   10334:	20c01f26 	beq	r4,r3,103b4 <displayShow+0xf4>
	    display = 6;
	}else if (suma1 == 15 ) { //F
   10338:	014003c4 	movi	r5,15
   1033c:	21401e1e 	bne	r4,r5,103b8 <displayShow+0xf8>
   10340:	00000c06 	br	10374 <displayShow+0xb4>
	}
	return sumaTmp;
}
int displayShow(int suma1,int display){
	if (suma1 == 0) {
	    display = 64;
   10344:	00801004 	movi	r2,64
   10348:	f800283a 	ret
	} else if (suma1 == 1) {
	    display = 121;
   1034c:	00801e44 	movi	r2,121
   10350:	f800283a 	ret
	} else if (suma1 == 2) {
	    display = 36;
   10354:	00800904 	movi	r2,36
   10358:	f800283a 	ret
	} else if (suma1 == 3) {
	    display = 48;
   1035c:	00800c04 	movi	r2,48
   10360:	f800283a 	ret
	} else if (suma1 == 4) {
	    display = 25;
   10364:	00800644 	movi	r2,25
   10368:	f800283a 	ret
	} else if (suma1 == 5) {
	    display = 18;
   1036c:	00800484 	movi	r2,18
   10370:	f800283a 	ret
	} else if (suma1 == 6) {
	    display = 2;
   10374:	1805883a 	mov	r2,r3
   10378:	f800283a 	ret
	} else if (suma1 == 7) {
	    display = 120;
   1037c:	00801e04 	movi	r2,120
   10380:	f800283a 	ret
	} else if (suma1 == 8) {
	    display = 0;
   10384:	0005883a 	mov	r2,zero
   10388:	f800283a 	ret
	} else if (suma1 == 9 ) {
	    display = 24;
   1038c:	00800604 	movi	r2,24
   10390:	f800283a 	ret
	}else if (suma1 == 10 ) { //A
	    display = 8;
   10394:	00800204 	movi	r2,8
   10398:	f800283a 	ret
	}else if (suma1 == 11 ) { //B
	    display = 3;
   1039c:	008000c4 	movi	r2,3
   103a0:	f800283a 	ret
	}else if (suma1 == 12 ) { //C
	    display = 70;
   103a4:	00801184 	movi	r2,70
   103a8:	f800283a 	ret
	}else if (suma1 == 13 ) { //D
	    display = 33;
   103ac:	00800844 	movi	r2,33
   103b0:	f800283a 	ret
	}else if (suma1 == 14 ) { //E
	    display = 6;
   103b4:	00800184 	movi	r2,6
	}else if (suma1 == 15 ) { //F
	    display = 14;
	    suma1=0;
	}
	return display;
}
   103b8:	f800283a 	ret

000103bc <run_isr>:

static void run_isr(void *context){
   103bc:	deffe704 	addi	sp,sp,-100
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG3_BASE, display4);
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG4_BASE, display5);
}
static void timer_isr()
{
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG0_BASE, display1);
   103c0:	d0a00517 	ldw	r2,-32748(gp)
	    suma1=0;
	}
	return display;
}

static void run_isr(void *context){
   103c4:	dd801515 	stw	r22,84(sp)
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG3_BASE, display4);
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG4_BASE, display5);
}
static void timer_isr()
{
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG0_BASE, display1);
   103c8:	05800074 	movhi	r22,1
	    suma1=0;
	}
	return display;
}

static void run_isr(void *context){
   103cc:	dfc01815 	stw	ra,96(sp)
   103d0:	df001715 	stw	fp,92(sp)
   103d4:	ddc01615 	stw	r23,88(sp)
   103d8:	dd401415 	stw	r21,80(sp)
   103dc:	dd001315 	stw	r20,76(sp)
   103e0:	dcc01215 	stw	r19,72(sp)
   103e4:	dc801115 	stw	r18,68(sp)
   103e8:	dc401015 	stw	r17,64(sp)
   103ec:	dc000f15 	stw	r16,60(sp)
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG3_BASE, display4);
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG4_BASE, display5);
}
static void timer_isr()
{
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG0_BASE, display1);
   103f0:	b5903c04 	addi	r22,r22,16624
   103f4:	b0800035 	stwio	r2,0(r22)
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG1_BASE, display2);
   103f8:	d0a00417 	ldw	r2,-32752(gp)
   103fc:	05400074 	movhi	r21,1
   10400:	ad503804 	addi	r21,r21,16608
   10404:	a8800035 	stwio	r2,0(r21)
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG2_BASE, display3);
   10408:	d0a00317 	ldw	r2,-32756(gp)
   1040c:	05000074 	movhi	r20,1
   10410:	a5103404 	addi	r20,r20,16592
   10414:	a0800035 	stwio	r2,0(r20)
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG3_BASE, display4);
   10418:	d0a00217 	ldw	r2,-32760(gp)
   1041c:	04c00074 	movhi	r19,1
   10420:	9cd03004 	addi	r19,r19,16576
   10424:	98800035 	stwio	r2,0(r19)
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG4_BASE, display5);
   10428:	d0a00117 	ldw	r2,-32764(gp)
   1042c:	04800074 	movhi	r18,1
   10430:	94902c04 	addi	r18,r18,16560
   10434:	90800035 	stwio	r2,0(r18)

	if(!(IORD_ALTERA_AVALON_PIO_DATA(BTN_0_BASE) & 1)){
   10438:	00800074 	movhi	r2,1
   1043c:	10901804 	addi	r2,r2,16480
   10440:	10800037 	ldwio	r2,0(r2)
   10444:	1080004c 	andi	r2,r2,1
   10448:	1000061e 	bne	r2,zero,10464 <run_isr+0xa8>
	display4=64;
	display5=64;
}

int cambiarDisplay(int display_num){
	display_num+=1;
   1044c:	d0a00c17 	ldw	r2,-32720(gp)
	if(display_num == 5){
   10450:	00c00144 	movi	r3,5
	display4=64;
	display5=64;
}

int cambiarDisplay(int display_num){
	display_num+=1;
   10454:	10800044 	addi	r2,r2,1
	if(display_num == 5){
   10458:	10c0011e 	bne	r2,r3,10460 <run_isr+0xa4>
		display_num=0;
   1045c:	0005883a 	mov	r2,zero
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG2_BASE, display3);
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG3_BASE, display4);
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG4_BASE, display5);

	if(!(IORD_ALTERA_AVALON_PIO_DATA(BTN_0_BASE) & 1)){
		sevensegChange= cambiarDisplay(sevensegChange);
   10460:	d0a00c15 	stw	r2,-32720(gp)
		}
	if(sevensegChange==0 && !(IORD_ALTERA_AVALON_PIO_DATA(BTN_BASE) & 1) ){
   10464:	d4200c17 	ldw	r16,-32720(gp)
   10468:	80000e1e 	bne	r16,zero,104a4 <run_isr+0xe8>
   1046c:	00800074 	movhi	r2,1
   10470:	10901c04 	addi	r2,r2,16496
   10474:	10800037 	ldwio	r2,0(r2)
   10478:	1080004c 	andi	r2,r2,1
   1047c:	1000091e 	bne	r2,zero,104a4 <run_isr+0xe8>
		display_num=0;
	}
	return display_num;
}
int sumarDisplay(int sumaTmp){
	sumaTmp+=1;
   10480:	d1201317 	ldw	r4,-32692(gp)
	if(sumaTmp==16){
   10484:	00800404 	movi	r2,16
		display_num=0;
	}
	return display_num;
}
int sumarDisplay(int sumaTmp){
	sumaTmp+=1;
   10488:	21000044 	addi	r4,r4,1
	if(sumaTmp==16){
   1048c:	2080011e 	bne	r4,r2,10494 <run_isr+0xd8>
		sumaTmp=0;
   10490:	0009883a 	mov	r4,zero
	if(!(IORD_ALTERA_AVALON_PIO_DATA(BTN_0_BASE) & 1)){
		sevensegChange= cambiarDisplay(sevensegChange);
		}
	if(sevensegChange==0 && !(IORD_ALTERA_AVALON_PIO_DATA(BTN_BASE) & 1) ){
		suma = sumarDisplay(suma);
		display1 = displayShow(suma,display1);
   10494:	d1600517 	ldw	r5,-32748(gp)

	if(!(IORD_ALTERA_AVALON_PIO_DATA(BTN_0_BASE) & 1)){
		sevensegChange= cambiarDisplay(sevensegChange);
		}
	if(sevensegChange==0 && !(IORD_ALTERA_AVALON_PIO_DATA(BTN_BASE) & 1) ){
		suma = sumarDisplay(suma);
   10498:	d1201315 	stw	r4,-32692(gp)
		display1 = displayShow(suma,display1);
   1049c:	00102c00 	call	102c0 <displayShow>
   104a0:	d0a00515 	stw	r2,-32748(gp)
		}
	if(sevensegChange==1 && !(IORD_ALTERA_AVALON_PIO_DATA(BTN_BASE) & 1)){
   104a4:	00800044 	movi	r2,1
   104a8:	80800e1e 	bne	r16,r2,104e4 <run_isr+0x128>
   104ac:	00800074 	movhi	r2,1
   104b0:	10901c04 	addi	r2,r2,16496
   104b4:	10800037 	ldwio	r2,0(r2)
   104b8:	1080004c 	andi	r2,r2,1
   104bc:	1000091e 	bne	r2,zero,104e4 <run_isr+0x128>
		display_num=0;
	}
	return display_num;
}
int sumarDisplay(int sumaTmp){
	sumaTmp+=1;
   104c0:	d1201217 	ldw	r4,-32696(gp)
	if(sumaTmp==16){
   104c4:	00800404 	movi	r2,16
		display_num=0;
	}
	return display_num;
}
int sumarDisplay(int sumaTmp){
	sumaTmp+=1;
   104c8:	21000044 	addi	r4,r4,1
	if(sumaTmp==16){
   104cc:	2080011e 	bne	r4,r2,104d4 <run_isr+0x118>
		sumaTmp=0;
   104d0:	0009883a 	mov	r4,zero
		suma = sumarDisplay(suma);
		display1 = displayShow(suma,display1);
		}
	if(sevensegChange==1 && !(IORD_ALTERA_AVALON_PIO_DATA(BTN_BASE) & 1)){
		digit2 = sumarDisplay(digit2);
		display2 = displayShow(digit2,display2);
   104d4:	d1600417 	ldw	r5,-32752(gp)
	if(sevensegChange==0 && !(IORD_ALTERA_AVALON_PIO_DATA(BTN_BASE) & 1) ){
		suma = sumarDisplay(suma);
		display1 = displayShow(suma,display1);
		}
	if(sevensegChange==1 && !(IORD_ALTERA_AVALON_PIO_DATA(BTN_BASE) & 1)){
		digit2 = sumarDisplay(digit2);
   104d8:	d1201215 	stw	r4,-32696(gp)
		display2 = displayShow(digit2,display2);
   104dc:	00102c00 	call	102c0 <displayShow>
   104e0:	d0a00415 	stw	r2,-32752(gp)

			}
	if(sevensegChange==2 && !(IORD_ALTERA_AVALON_PIO_DATA(BTN_BASE) & 1)){
   104e4:	00800084 	movi	r2,2
   104e8:	80800e1e 	bne	r16,r2,10524 <run_isr+0x168>
   104ec:	00800074 	movhi	r2,1
   104f0:	10901c04 	addi	r2,r2,16496
   104f4:	10800037 	ldwio	r2,0(r2)
   104f8:	1080004c 	andi	r2,r2,1
   104fc:	1000091e 	bne	r2,zero,10524 <run_isr+0x168>
		display_num=0;
	}
	return display_num;
}
int sumarDisplay(int sumaTmp){
	sumaTmp+=1;
   10500:	d1201117 	ldw	r4,-32700(gp)
	if(sumaTmp==16){
   10504:	00800404 	movi	r2,16
		display_num=0;
	}
	return display_num;
}
int sumarDisplay(int sumaTmp){
	sumaTmp+=1;
   10508:	21000044 	addi	r4,r4,1
	if(sumaTmp==16){
   1050c:	2080011e 	bne	r4,r2,10514 <run_isr+0x158>
		sumaTmp=0;
   10510:	0009883a 	mov	r4,zero
		display2 = displayShow(digit2,display2);

			}
	if(sevensegChange==2 && !(IORD_ALTERA_AVALON_PIO_DATA(BTN_BASE) & 1)){
		digit3 = sumarDisplay(digit3);
		display3 = displayShow(digit3,display3);
   10514:	d1600317 	ldw	r5,-32756(gp)
		digit2 = sumarDisplay(digit2);
		display2 = displayShow(digit2,display2);

			}
	if(sevensegChange==2 && !(IORD_ALTERA_AVALON_PIO_DATA(BTN_BASE) & 1)){
		digit3 = sumarDisplay(digit3);
   10518:	d1201115 	stw	r4,-32700(gp)
		display3 = displayShow(digit3,display3);
   1051c:	00102c00 	call	102c0 <displayShow>
   10520:	d0a00315 	stw	r2,-32756(gp)

	}
	if(sevensegChange==3 && !(IORD_ALTERA_AVALON_PIO_DATA(BTN_BASE) & 1)){
   10524:	008000c4 	movi	r2,3
   10528:	80800e1e 	bne	r16,r2,10564 <run_isr+0x1a8>
   1052c:	00800074 	movhi	r2,1
   10530:	10901c04 	addi	r2,r2,16496
   10534:	10800037 	ldwio	r2,0(r2)
   10538:	1080004c 	andi	r2,r2,1
   1053c:	1000091e 	bne	r2,zero,10564 <run_isr+0x1a8>
		display_num=0;
	}
	return display_num;
}
int sumarDisplay(int sumaTmp){
	sumaTmp+=1;
   10540:	d1201017 	ldw	r4,-32704(gp)
	if(sumaTmp==16){
   10544:	00800404 	movi	r2,16
		display_num=0;
	}
	return display_num;
}
int sumarDisplay(int sumaTmp){
	sumaTmp+=1;
   10548:	21000044 	addi	r4,r4,1
	if(sumaTmp==16){
   1054c:	2080011e 	bne	r4,r2,10554 <run_isr+0x198>
		sumaTmp=0;
   10550:	0009883a 	mov	r4,zero
		display3 = displayShow(digit3,display3);

	}
	if(sevensegChange==3 && !(IORD_ALTERA_AVALON_PIO_DATA(BTN_BASE) & 1)){
		digit4 = sumarDisplay(digit4);
		display4 = displayShow(digit4,display4);
   10554:	d1600217 	ldw	r5,-32760(gp)
		digit3 = sumarDisplay(digit3);
		display3 = displayShow(digit3,display3);

	}
	if(sevensegChange==3 && !(IORD_ALTERA_AVALON_PIO_DATA(BTN_BASE) & 1)){
		digit4 = sumarDisplay(digit4);
   10558:	d1201015 	stw	r4,-32704(gp)
		display4 = displayShow(digit4,display4);
   1055c:	00102c00 	call	102c0 <displayShow>
   10560:	d0a00215 	stw	r2,-32760(gp)

	}
	if(sevensegChange==4 && !(IORD_ALTERA_AVALON_PIO_DATA(BTN_BASE) & 1)){
   10564:	00800104 	movi	r2,4
   10568:	80800e1e 	bne	r16,r2,105a4 <run_isr+0x1e8>
   1056c:	00800074 	movhi	r2,1
   10570:	10901c04 	addi	r2,r2,16496
   10574:	10800037 	ldwio	r2,0(r2)
   10578:	1080004c 	andi	r2,r2,1
   1057c:	1000091e 	bne	r2,zero,105a4 <run_isr+0x1e8>
		display_num=0;
	}
	return display_num;
}
int sumarDisplay(int sumaTmp){
	sumaTmp+=1;
   10580:	d1200f17 	ldw	r4,-32708(gp)
	if(sumaTmp==16){
   10584:	00800404 	movi	r2,16
		display_num=0;
	}
	return display_num;
}
int sumarDisplay(int sumaTmp){
	sumaTmp+=1;
   10588:	21000044 	addi	r4,r4,1
	if(sumaTmp==16){
   1058c:	2080011e 	bne	r4,r2,10594 <run_isr+0x1d8>
		sumaTmp=0;
   10590:	0009883a 	mov	r4,zero
		display4 = displayShow(digit4,display4);

	}
	if(sevensegChange==4 && !(IORD_ALTERA_AVALON_PIO_DATA(BTN_BASE) & 1)){
		digit5 = sumarDisplay(digit5);
		display5 = displayShow(digit5,display5);
   10594:	d1600117 	ldw	r5,-32764(gp)
		digit4 = sumarDisplay(digit4);
		display4 = displayShow(digit4,display4);

	}
	if(sevensegChange==4 && !(IORD_ALTERA_AVALON_PIO_DATA(BTN_BASE) & 1)){
		digit5 = sumarDisplay(digit5);
   10598:	d1200f15 	stw	r4,-32708(gp)
		display5 = displayShow(digit5,display5);
   1059c:	00102c00 	call	102c0 <displayShow>
   105a0:	d0a00115 	stw	r2,-32764(gp)

	}

    if(!(IORD_ALTERA_AVALON_PIO_DATA(BTN_1_BASE) & 1)){
   105a4:	00800074 	movhi	r2,1
   105a8:	10901404 	addi	r2,r2,16464
   105ac:	10800037 	ldwio	r2,0(r2)
   105b0:	1080004c 	andi	r2,r2,1
   105b4:	10000f1e 	bne	r2,zero,105f4 <run_isr+0x238>
    	exponente = suma+ digit2*16 + digit3*256 +digit4*4096 +digit5*65536;
   105b8:	d0a01217 	ldw	r2,-32696(gp)
   105bc:	d0e01317 	ldw	r3,-32692(gp)
   105c0:	d1201117 	ldw	r4,-32700(gp)
   105c4:	1004913a 	slli	r2,r2,4
   105c8:	2008923a 	slli	r4,r4,8
   105cc:	10c5883a 	add	r2,r2,r3
   105d0:	d0e01017 	ldw	r3,-32704(gp)
   105d4:	1105883a 	add	r2,r2,r4
   105d8:	1806933a 	slli	r3,r3,12
   105dc:	10c7883a 	add	r3,r2,r3
   105e0:	d0a00f17 	ldw	r2,-32708(gp)
   105e4:	1004943a 	slli	r2,r2,16
   105e8:	1885883a 	add	r2,r3,r2
   105ec:	d0a00e15 	stw	r2,-32712(gp)
    	resetData();
   105f0:	00102680 	call	10268 <resetData>
    }
    if(!(IORD_ALTERA_AVALON_PIO_DATA(BTN_2_BASE) & 1)){
   105f4:	00800074 	movhi	r2,1
   105f8:	10901004 	addi	r2,r2,16448
   105fc:	10800037 	ldwio	r2,0(r2)
   10600:	1080004c 	andi	r2,r2,1
   10604:	10000f1e 	bne	r2,zero,10644 <run_isr+0x288>
    	modulo = suma+ digit2*16 + digit3*256 +digit4*4096 +digit5*65536;
   10608:	d0a01217 	ldw	r2,-32696(gp)
   1060c:	d0e01317 	ldw	r3,-32692(gp)
   10610:	d1201117 	ldw	r4,-32700(gp)
   10614:	1004913a 	slli	r2,r2,4
   10618:	2008923a 	slli	r4,r4,8
   1061c:	10c5883a 	add	r2,r2,r3
   10620:	d0e01017 	ldw	r3,-32704(gp)
   10624:	1105883a 	add	r2,r2,r4
   10628:	1806933a 	slli	r3,r3,12
   1062c:	10c7883a 	add	r3,r2,r3
   10630:	d0a00f17 	ldw	r2,-32708(gp)
   10634:	1004943a 	slli	r2,r2,16
   10638:	1885883a 	add	r2,r3,r2
   1063c:	d0a00d15 	stw	r2,-32716(gp)
    	resetData();
   10640:	00102680 	call	10268 <resetData>
    }
    if((IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE) & 1)){
   10644:	00800074 	movhi	r2,1
   10648:	10900804 	addi	r2,r2,16416
   1064c:	10800037 	ldwio	r2,0(r2)
   10650:	1080004c 	andi	r2,r2,1
   10654:	10005a26 	beq	r2,zero,107c0 <run_isr+0x404>
    	int number = 1;
    	int localIndex = 1;
    	int data[] = {18434, 4741, 11456, 11909, 6891, 18758, 4144, 10253, 5041, 4404, 6073, 13913, 16206, 6512};
   10658:	01400034 	movhi	r5,0
   1065c:	01800e04 	movi	r6,56
   10660:	29400004 	addi	r5,r5,0
   10664:	d809883a 	mov	r4,sp
   10668:	0010a400 	call	10a40 <memcpy>

    	    // Remove the first element from the array
    	//removeFirstElement(data, &size);
    	int dato=1;

    	dato=data[0+index];
   1066c:	d4600017 	ldw	r17,-32768(gp)

    	//int *ptr=data;
    	//number = mod_pow(data[i],exponente, modulo);
    	int result = 1;
    	int expTemp= exponente;
   10670:	d4a00e17 	ldw	r18,-32712(gp)
    	int base = dato;
    	int mod=modulo;
   10674:	d5e00d17 	ldw	r23,-32716(gp)

    	    // Remove the first element from the array
    	//removeFirstElement(data, &size);
    	int dato=1;

    	dato=data[0+index];
   10678:	8c45883a 	add	r2,r17,r17
   1067c:	1085883a 	add	r2,r2,r2
   10680:	d885883a 	add	r2,sp,r2
   10684:	11800017 	ldw	r6,0(r2)

    	//int *ptr=data;
    	//number = mod_pow(data[i],exponente, modulo);
    	int result = 1;
   10688:	04000044 	movi	r16,1
    	int expTemp= exponente;
    	int base = dato;
    	int mod=modulo;
    	while (expTemp > 0) {
    		if (expTemp % 2 == 1) {
   1068c:	8039883a 	mov	fp,r16
    	//number = mod_pow(data[i],exponente, modulo);
    	int result = 1;
    	int expTemp= exponente;
    	int base = dato;
    	int mod=modulo;
    	while (expTemp > 0) {
   10690:	0480140e 	bge	zero,r18,106e4 <run_isr+0x328>
    		if (expTemp % 2 == 1) {
   10694:	9080004c 	andi	r2,r18,1
   10698:	1700091e 	bne	r2,fp,106c0 <run_isr+0x304>
    			result = (result * base) % mod;
   1069c:	300b883a 	mov	r5,r6
   106a0:	8009883a 	mov	r4,r16
   106a4:	d9800e15 	stw	r6,56(sp)
   106a8:	0010a180 	call	10a18 <__mulsi3>
   106ac:	b80b883a 	mov	r5,r23
   106b0:	1009883a 	mov	r4,r2
   106b4:	00108e80 	call	108e8 <__modsi3>
   106b8:	d9800e17 	ldw	r6,56(sp)
   106bc:	1021883a 	mov	r16,r2
    	    }
    		base = (base * base) % mod;
   106c0:	300b883a 	mov	r5,r6
   106c4:	3009883a 	mov	r4,r6
   106c8:	0010a180 	call	10a18 <__mulsi3>
   106cc:	b80b883a 	mov	r5,r23
   106d0:	1009883a 	mov	r4,r2
   106d4:	00108e80 	call	108e8 <__modsi3>
   106d8:	100d883a 	mov	r6,r2
    		expTemp /= 2;
   106dc:	9025d07a 	srai	r18,r18,1
   106e0:	003feb06 	br	10690 <__flash_rwdata_start+0xfffff948>
    	}
    	number = result;
    	fourth = number % 10;
   106e4:	8009883a 	mov	r4,r16
   106e8:	01400284 	movi	r5,10
   106ec:	00108e80 	call	108e8 <__modsi3>
    	number /= 10;
    	third = number % 10;
   106f0:	8009883a 	mov	r4,r16
   106f4:	01400284 	movi	r5,10
    	    }
    		base = (base * base) % mod;
    		expTemp /= 2;
    	}
    	number = result;
    	fourth = number % 10;
   106f8:	d0a00815 	stw	r2,-32736(gp)
    	number /= 10;
    	third = number % 10;
   106fc:	d8800e15 	stw	r2,56(sp)
   10700:	00108640 	call	10864 <__divsi3>
   10704:	01400284 	movi	r5,10
   10708:	1009883a 	mov	r4,r2
   1070c:	00108e80 	call	108e8 <__modsi3>
    	number /= 10;
    	second = number % 10;
   10710:	8009883a 	mov	r4,r16
   10714:	01401904 	movi	r5,100
    		expTemp /= 2;
    	}
    	number = result;
    	fourth = number % 10;
    	number /= 10;
    	third = number % 10;
   10718:	1039883a 	mov	fp,r2
   1071c:	d0a00915 	stw	r2,-32732(gp)
    	number /= 10;
    	second = number % 10;
   10720:	00108640 	call	10864 <__divsi3>
   10724:	01400284 	movi	r5,10
   10728:	1009883a 	mov	r4,r2
   1072c:	00108e80 	call	108e8 <__modsi3>
    	number /= 10;
    	first = number % 10;
   10730:	8009883a 	mov	r4,r16
   10734:	0140fa04 	movi	r5,1000
    	number = result;
    	fourth = number % 10;
    	number /= 10;
    	third = number % 10;
    	number /= 10;
    	second = number % 10;
   10738:	102f883a 	mov	r23,r2
   1073c:	d0a00a15 	stw	r2,-32728(gp)
    	number /= 10;
    	first = number % 10;
   10740:	00108640 	call	10864 <__divsi3>
   10744:	01400284 	movi	r5,10
   10748:	1009883a 	mov	r4,r2
   1074c:	00108e80 	call	108e8 <__modsi3>
    	suma=fourth;
   10750:	d8c00e17 	ldw	r3,56(sp)
    	display1 = displayShow(suma,display1);
   10754:	d1600517 	ldw	r5,-32748(gp)
    	number /= 10;
    	third = number % 10;
    	number /= 10;
    	second = number % 10;
    	number /= 10;
    	first = number % 10;
   10758:	1021883a 	mov	r16,r2
    	suma=fourth;
    	display1 = displayShow(suma,display1);
   1075c:	1809883a 	mov	r4,r3
    	third = number % 10;
    	number /= 10;
    	second = number % 10;
    	number /= 10;
    	first = number % 10;
    	suma=fourth;
   10760:	d0e01315 	stw	r3,-32692(gp)
    	number /= 10;
    	third = number % 10;
    	number /= 10;
    	second = number % 10;
    	number /= 10;
    	first = number % 10;
   10764:	d0a00b15 	stw	r2,-32724(gp)
    	suma=fourth;
    	display1 = displayShow(suma,display1);
   10768:	00102c00 	call	102c0 <displayShow>
    	digit2=third;
    	display2 = displayShow(digit2,display2);
   1076c:	d1600417 	ldw	r5,-32752(gp)
   10770:	e009883a 	mov	r4,fp
    	number /= 10;
    	second = number % 10;
    	number /= 10;
    	first = number % 10;
    	suma=fourth;
    	display1 = displayShow(suma,display1);
   10774:	d0a00515 	stw	r2,-32748(gp)
    	digit2=third;
   10778:	d7201215 	stw	fp,-32696(gp)
    	display2 = displayShow(digit2,display2);
   1077c:	00102c00 	call	102c0 <displayShow>
    	digit3=second;
    	display3 = displayShow(digit3,display3);
   10780:	d1600317 	ldw	r5,-32756(gp)
   10784:	b809883a 	mov	r4,r23
    	number /= 10;
    	first = number % 10;
    	suma=fourth;
    	display1 = displayShow(suma,display1);
    	digit2=third;
    	display2 = displayShow(digit2,display2);
   10788:	d0a00415 	stw	r2,-32752(gp)
    	digit3=second;
   1078c:	d5e01115 	stw	r23,-32700(gp)
    	display3 = displayShow(digit3,display3);
   10790:	00102c00 	call	102c0 <displayShow>
    	digit4=first;
    	display4 = displayShow(digit4,display4);
   10794:	d1600217 	ldw	r5,-32760(gp)
   10798:	8009883a 	mov	r4,r16
    	suma=fourth;
    	display1 = displayShow(suma,display1);
    	digit2=third;
    	display2 = displayShow(digit2,display2);
    	digit3=second;
    	display3 = displayShow(digit3,display3);
   1079c:	d0a00315 	stw	r2,-32756(gp)
    	digit4=first;
   107a0:	d4201015 	stw	r16,-32704(gp)
    	display4 = displayShow(digit4,display4);
   107a4:	00102c00 	call	102c0 <displayShow>
   107a8:	d0a00215 	stw	r2,-32760(gp)
    	digit5=0;
    	display5 = displayShow(digit5,display5);
    	//index= incrementarIndex(index);
    	index=incrementarIndex(index);
   107ac:	8c400044 	addi	r17,r17,1
    	digit3=second;
    	display3 = displayShow(digit3,display3);
    	digit4=first;
    	display4 = displayShow(digit4,display4);
    	digit5=0;
    	display5 = displayShow(digit5,display5);
   107b0:	00801004 	movi	r2,64
    	display2 = displayShow(digit2,display2);
    	digit3=second;
    	display3 = displayShow(digit3,display3);
    	digit4=first;
    	display4 = displayShow(digit4,display4);
    	digit5=0;
   107b4:	d0200f15 	stw	zero,-32708(gp)
    	display5 = displayShow(digit5,display5);
   107b8:	d0a00115 	stw	r2,-32764(gp)
    	//index= incrementarIndex(index);
    	index=incrementarIndex(index);
   107bc:	d4600015 	stw	r17,-32768(gp)
    }
    //unsigned int decimal_value = (unsigned int)strtol(hex_final, NULL, 16);
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG0_BASE, display1);
   107c0:	d0a00517 	ldw	r2,-32748(gp)
   107c4:	b0800035 	stwio	r2,0(r22)
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG1_BASE, display2);
   107c8:	d0a00417 	ldw	r2,-32752(gp)
   107cc:	a8800035 	stwio	r2,0(r21)
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG2_BASE, display3);
   107d0:	d0a00317 	ldw	r2,-32756(gp)
   107d4:	a0800035 	stwio	r2,0(r20)
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG3_BASE, display4);
   107d8:	d0a00217 	ldw	r2,-32760(gp)
   107dc:	98800035 	stwio	r2,0(r19)
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG4_BASE, display5);
   107e0:	d0a00117 	ldw	r2,-32764(gp)
   107e4:	00c00074 	movhi	r3,1
   107e8:	18d02c04 	addi	r3,r3,16560
   107ec:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
   107f0:	00800074 	movhi	r2,1
   107f4:	10900004 	addi	r2,r2,16384
   107f8:	10000035 	stwio	zero,0(r2)
static void run_isr(void *context){
	(void) context;

	timer_isr();

}
   107fc:	dfc01817 	ldw	ra,96(sp)
   10800:	df001717 	ldw	fp,92(sp)
   10804:	ddc01617 	ldw	r23,88(sp)
   10808:	dd801517 	ldw	r22,84(sp)
   1080c:	dd401417 	ldw	r21,80(sp)
   10810:	dd001317 	ldw	r20,76(sp)
   10814:	dcc01217 	ldw	r19,72(sp)
   10818:	dc801117 	ldw	r18,68(sp)
   1081c:	dc401017 	ldw	r17,64(sp)
   10820:	dc000f17 	ldw	r16,60(sp)
   10824:	dec01904 	addi	sp,sp,100
   10828:	f800283a 	ret

0001082c <main>:
int main(){
   1082c:	defffe04 	addi	sp,sp,-8
	alt_ic_isr_register(
   10830:	01800074 	movhi	r6,1
   10834:	d8000015 	stw	zero,0(sp)
   10838:	000f883a 	mov	r7,zero
   1083c:	3180ef04 	addi	r6,r6,956
   10840:	000b883a 	mov	r5,zero
   10844:	0009883a 	mov	r4,zero
	(void) context;

	timer_isr();

}
int main(){
   10848:	dfc00115 	stw	ra,4(sp)
	alt_ic_isr_register(
   1084c:	0010a680 	call	10a68 <alt_ic_isr_register>
		TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID,
		TIMER_0_IRQ,
		run_isr,
		NULL,
		NULL);
	IOWR_ALTERA_AVALON_TIMER_CONTROL(
   10850:	00800074 	movhi	r2,1
   10854:	10900104 	addi	r2,r2,16388
   10858:	00c000c4 	movi	r3,3
   1085c:	10c00035 	stwio	r3,0(r2)
   10860:	003fff06 	br	10860 <__flash_rwdata_start+0xfffffb18>

00010864 <__divsi3>:
   10864:	20001b16 	blt	r4,zero,108d4 <__divsi3+0x70>
   10868:	000f883a 	mov	r7,zero
   1086c:	28001616 	blt	r5,zero,108c8 <__divsi3+0x64>
   10870:	200d883a 	mov	r6,r4
   10874:	29001a2e 	bgeu	r5,r4,108e0 <__divsi3+0x7c>
   10878:	00800804 	movi	r2,32
   1087c:	00c00044 	movi	r3,1
   10880:	00000106 	br	10888 <__divsi3+0x24>
   10884:	10000d26 	beq	r2,zero,108bc <__divsi3+0x58>
   10888:	294b883a 	add	r5,r5,r5
   1088c:	10bfffc4 	addi	r2,r2,-1
   10890:	18c7883a 	add	r3,r3,r3
   10894:	293ffb36 	bltu	r5,r4,10884 <__flash_rwdata_start+0xfffffb3c>
   10898:	0005883a 	mov	r2,zero
   1089c:	18000726 	beq	r3,zero,108bc <__divsi3+0x58>
   108a0:	0005883a 	mov	r2,zero
   108a4:	31400236 	bltu	r6,r5,108b0 <__divsi3+0x4c>
   108a8:	314dc83a 	sub	r6,r6,r5
   108ac:	10c4b03a 	or	r2,r2,r3
   108b0:	1806d07a 	srli	r3,r3,1
   108b4:	280ad07a 	srli	r5,r5,1
   108b8:	183ffa1e 	bne	r3,zero,108a4 <__flash_rwdata_start+0xfffffb5c>
   108bc:	38000126 	beq	r7,zero,108c4 <__divsi3+0x60>
   108c0:	0085c83a 	sub	r2,zero,r2
   108c4:	f800283a 	ret
   108c8:	014bc83a 	sub	r5,zero,r5
   108cc:	39c0005c 	xori	r7,r7,1
   108d0:	003fe706 	br	10870 <__flash_rwdata_start+0xfffffb28>
   108d4:	0109c83a 	sub	r4,zero,r4
   108d8:	01c00044 	movi	r7,1
   108dc:	003fe306 	br	1086c <__flash_rwdata_start+0xfffffb24>
   108e0:	00c00044 	movi	r3,1
   108e4:	003fee06 	br	108a0 <__flash_rwdata_start+0xfffffb58>

000108e8 <__modsi3>:
   108e8:	20001716 	blt	r4,zero,10948 <__modsi3+0x60>
   108ec:	000f883a 	mov	r7,zero
   108f0:	2005883a 	mov	r2,r4
   108f4:	28001216 	blt	r5,zero,10940 <__modsi3+0x58>
   108f8:	2900162e 	bgeu	r5,r4,10954 <__modsi3+0x6c>
   108fc:	01800804 	movi	r6,32
   10900:	00c00044 	movi	r3,1
   10904:	00000106 	br	1090c <__modsi3+0x24>
   10908:	30000a26 	beq	r6,zero,10934 <__modsi3+0x4c>
   1090c:	294b883a 	add	r5,r5,r5
   10910:	31bfffc4 	addi	r6,r6,-1
   10914:	18c7883a 	add	r3,r3,r3
   10918:	293ffb36 	bltu	r5,r4,10908 <__flash_rwdata_start+0xfffffbc0>
   1091c:	18000526 	beq	r3,zero,10934 <__modsi3+0x4c>
   10920:	1806d07a 	srli	r3,r3,1
   10924:	11400136 	bltu	r2,r5,1092c <__modsi3+0x44>
   10928:	1145c83a 	sub	r2,r2,r5
   1092c:	280ad07a 	srli	r5,r5,1
   10930:	183ffb1e 	bne	r3,zero,10920 <__flash_rwdata_start+0xfffffbd8>
   10934:	38000126 	beq	r7,zero,1093c <__modsi3+0x54>
   10938:	0085c83a 	sub	r2,zero,r2
   1093c:	f800283a 	ret
   10940:	014bc83a 	sub	r5,zero,r5
   10944:	003fec06 	br	108f8 <__flash_rwdata_start+0xfffffbb0>
   10948:	0109c83a 	sub	r4,zero,r4
   1094c:	01c00044 	movi	r7,1
   10950:	003fe706 	br	108f0 <__flash_rwdata_start+0xfffffba8>
   10954:	00c00044 	movi	r3,1
   10958:	003ff106 	br	10920 <__flash_rwdata_start+0xfffffbd8>

0001095c <__udivsi3>:
   1095c:	200d883a 	mov	r6,r4
   10960:	2900152e 	bgeu	r5,r4,109b8 <__udivsi3+0x5c>
   10964:	28001416 	blt	r5,zero,109b8 <__udivsi3+0x5c>
   10968:	00800804 	movi	r2,32
   1096c:	00c00044 	movi	r3,1
   10970:	00000206 	br	1097c <__udivsi3+0x20>
   10974:	10000e26 	beq	r2,zero,109b0 <__udivsi3+0x54>
   10978:	28000516 	blt	r5,zero,10990 <__udivsi3+0x34>
   1097c:	294b883a 	add	r5,r5,r5
   10980:	10bfffc4 	addi	r2,r2,-1
   10984:	18c7883a 	add	r3,r3,r3
   10988:	293ffa36 	bltu	r5,r4,10974 <__flash_rwdata_start+0xfffffc2c>
   1098c:	18000826 	beq	r3,zero,109b0 <__udivsi3+0x54>
   10990:	0005883a 	mov	r2,zero
   10994:	31400236 	bltu	r6,r5,109a0 <__udivsi3+0x44>
   10998:	314dc83a 	sub	r6,r6,r5
   1099c:	10c4b03a 	or	r2,r2,r3
   109a0:	1806d07a 	srli	r3,r3,1
   109a4:	280ad07a 	srli	r5,r5,1
   109a8:	183ffa1e 	bne	r3,zero,10994 <__flash_rwdata_start+0xfffffc4c>
   109ac:	f800283a 	ret
   109b0:	0005883a 	mov	r2,zero
   109b4:	f800283a 	ret
   109b8:	00c00044 	movi	r3,1
   109bc:	003ff406 	br	10990 <__flash_rwdata_start+0xfffffc48>

000109c0 <__umodsi3>:
   109c0:	2005883a 	mov	r2,r4
   109c4:	2900122e 	bgeu	r5,r4,10a10 <__umodsi3+0x50>
   109c8:	28001116 	blt	r5,zero,10a10 <__umodsi3+0x50>
   109cc:	01800804 	movi	r6,32
   109d0:	00c00044 	movi	r3,1
   109d4:	00000206 	br	109e0 <__umodsi3+0x20>
   109d8:	30000c26 	beq	r6,zero,10a0c <__umodsi3+0x4c>
   109dc:	28000516 	blt	r5,zero,109f4 <__umodsi3+0x34>
   109e0:	294b883a 	add	r5,r5,r5
   109e4:	31bfffc4 	addi	r6,r6,-1
   109e8:	18c7883a 	add	r3,r3,r3
   109ec:	293ffa36 	bltu	r5,r4,109d8 <__flash_rwdata_start+0xfffffc90>
   109f0:	18000626 	beq	r3,zero,10a0c <__umodsi3+0x4c>
   109f4:	1806d07a 	srli	r3,r3,1
   109f8:	11400136 	bltu	r2,r5,10a00 <__umodsi3+0x40>
   109fc:	1145c83a 	sub	r2,r2,r5
   10a00:	280ad07a 	srli	r5,r5,1
   10a04:	183ffb1e 	bne	r3,zero,109f4 <__flash_rwdata_start+0xfffffcac>
   10a08:	f800283a 	ret
   10a0c:	f800283a 	ret
   10a10:	00c00044 	movi	r3,1
   10a14:	003ff706 	br	109f4 <__flash_rwdata_start+0xfffffcac>

00010a18 <__mulsi3>:
   10a18:	0005883a 	mov	r2,zero
   10a1c:	20000726 	beq	r4,zero,10a3c <__mulsi3+0x24>
   10a20:	20c0004c 	andi	r3,r4,1
   10a24:	2008d07a 	srli	r4,r4,1
   10a28:	18000126 	beq	r3,zero,10a30 <__mulsi3+0x18>
   10a2c:	1145883a 	add	r2,r2,r5
   10a30:	294b883a 	add	r5,r5,r5
   10a34:	203ffa1e 	bne	r4,zero,10a20 <__flash_rwdata_start+0xfffffcd8>
   10a38:	f800283a 	ret
   10a3c:	f800283a 	ret

00010a40 <memcpy>:
   10a40:	2005883a 	mov	r2,r4
   10a44:	2007883a 	mov	r3,r4
   10a48:	218d883a 	add	r6,r4,r6
   10a4c:	19800526 	beq	r3,r6,10a64 <memcpy+0x24>
   10a50:	29000003 	ldbu	r4,0(r5)
   10a54:	18c00044 	addi	r3,r3,1
   10a58:	29400044 	addi	r5,r5,1
   10a5c:	193fffc5 	stb	r4,-1(r3)
   10a60:	003ffa06 	br	10a4c <__flash_rwdata_start+0xfffffd04>
   10a64:	f800283a 	ret

00010a68 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10a68:	0010af41 	jmpi	10af4 <alt_iic_isr_register>

00010a6c <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10a6c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10a70:	00bfff84 	movi	r2,-2
   10a74:	2084703a 	and	r2,r4,r2
   10a78:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   10a7c:	00c00044 	movi	r3,1
   10a80:	d0a01717 	ldw	r2,-32676(gp)
   10a84:	194a983a 	sll	r5,r3,r5
   10a88:	288ab03a 	or	r5,r5,r2
   10a8c:	d1601715 	stw	r5,-32676(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10a90:	d0a01717 	ldw	r2,-32676(gp)
   10a94:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10a98:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
   10a9c:	0005883a 	mov	r2,zero
   10aa0:	f800283a 	ret

00010aa4 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10aa4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10aa8:	00bfff84 	movi	r2,-2
   10aac:	2084703a 	and	r2,r4,r2
   10ab0:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   10ab4:	00ffff84 	movi	r3,-2
   10ab8:	d0a01717 	ldw	r2,-32676(gp)
   10abc:	194a183a 	rol	r5,r3,r5
   10ac0:	288a703a 	and	r5,r5,r2
   10ac4:	d1601715 	stw	r5,-32676(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10ac8:	d0a01717 	ldw	r2,-32676(gp)
   10acc:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10ad0:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
   10ad4:	0005883a 	mov	r2,zero
   10ad8:	f800283a 	ret

00010adc <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10adc:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
   10ae0:	00800044 	movi	r2,1
   10ae4:	1144983a 	sll	r2,r2,r5
   10ae8:	10c4703a 	and	r2,r2,r3
}
   10aec:	1004c03a 	cmpne	r2,r2,zero
   10af0:	f800283a 	ret

00010af4 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10af4:	00c007c4 	movi	r3,31
   10af8:	19401616 	blt	r3,r5,10b54 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10afc:	defffe04 	addi	sp,sp,-8
   10b00:	dfc00115 	stw	ra,4(sp)
   10b04:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10b08:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10b0c:	00ffff84 	movi	r3,-2
   10b10:	80c6703a 	and	r3,r16,r3
   10b14:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   10b18:	280490fa 	slli	r2,r5,3
   10b1c:	00c00034 	movhi	r3,0
   10b20:	18c02d04 	addi	r3,r3,180
   10b24:	1885883a 	add	r2,r3,r2
   10b28:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
   10b2c:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10b30:	30000226 	beq	r6,zero,10b3c <alt_iic_isr_register+0x48>
   10b34:	0010a6c0 	call	10a6c <alt_ic_irq_enable>
   10b38:	00000106 	br	10b40 <alt_iic_isr_register+0x4c>
   10b3c:	0010aa40 	call	10aa4 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10b40:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
   10b44:	dfc00117 	ldw	ra,4(sp)
   10b48:	dc000017 	ldw	r16,0(sp)
   10b4c:	dec00204 	addi	sp,sp,8
   10b50:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
   10b54:	00bffa84 	movi	r2,-22
   10b58:	f800283a 	ret

00010b5c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10b5c:	deffff04 	addi	sp,sp,-4
   10b60:	01000034 	movhi	r4,0
   10b64:	01400074 	movhi	r5,1
   10b68:	dfc00015 	stw	ra,0(sp)
   10b6c:	21000e04 	addi	r4,r4,56
   10b70:	29435204 	addi	r5,r5,3400

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10b74:	2140061e 	bne	r4,r5,10b90 <alt_load+0x34>
   10b78:	01000074 	movhi	r4,1
   10b7c:	01400074 	movhi	r5,1
   10b80:	21000804 	addi	r4,r4,32
   10b84:	29400804 	addi	r5,r5,32
   10b88:	2140121e 	bne	r4,r5,10bd4 <alt_load+0x78>
   10b8c:	00000b06 	br	10bbc <alt_load+0x60>
   10b90:	00c00034 	movhi	r3,0
   10b94:	18c01504 	addi	r3,r3,84
   10b98:	1907c83a 	sub	r3,r3,r4
   10b9c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10ba0:	10fff526 	beq	r2,r3,10b78 <__flash_rwdata_start+0xfffffe30>
    {
      *to++ = *from++;
   10ba4:	114f883a 	add	r7,r2,r5
   10ba8:	39c00017 	ldw	r7,0(r7)
   10bac:	110d883a 	add	r6,r2,r4
   10bb0:	10800104 	addi	r2,r2,4
   10bb4:	31c00015 	stw	r7,0(r6)
   10bb8:	003ff906 	br	10ba0 <__flash_rwdata_start+0xfffffe58>
   10bbc:	01000034 	movhi	r4,0
   10bc0:	01400074 	movhi	r5,1
   10bc4:	21000004 	addi	r4,r4,0
   10bc8:	29434404 	addi	r5,r5,3344

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10bcc:	2140101e 	bne	r4,r5,10c10 <alt_load+0xb4>
   10bd0:	00000b06 	br	10c00 <alt_load+0xa4>
   10bd4:	00c00074 	movhi	r3,1
   10bd8:	18c06004 	addi	r3,r3,384
   10bdc:	1907c83a 	sub	r3,r3,r4
   10be0:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10be4:	10fff526 	beq	r2,r3,10bbc <__flash_rwdata_start+0xfffffe74>
    {
      *to++ = *from++;
   10be8:	114f883a 	add	r7,r2,r5
   10bec:	39c00017 	ldw	r7,0(r7)
   10bf0:	110d883a 	add	r6,r2,r4
   10bf4:	10800104 	addi	r2,r2,4
   10bf8:	31c00015 	stw	r7,0(r6)
   10bfc:	003ff906 	br	10be4 <__flash_rwdata_start+0xfffffe9c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10c00:	0010c8c0 	call	10c8c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   10c04:	dfc00017 	ldw	ra,0(sp)
   10c08:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   10c0c:	0010c901 	jmpi	10c90 <alt_icache_flush_all>
   10c10:	00c00034 	movhi	r3,0
   10c14:	18c00e04 	addi	r3,r3,56
   10c18:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10c1c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10c20:	18bff726 	beq	r3,r2,10c00 <__flash_rwdata_start+0xfffffeb8>
    {
      *to++ = *from++;
   10c24:	114f883a 	add	r7,r2,r5
   10c28:	39c00017 	ldw	r7,0(r7)
   10c2c:	110d883a 	add	r6,r2,r4
   10c30:	10800104 	addi	r2,r2,4
   10c34:	31c00015 	stw	r7,0(r6)
   10c38:	003ff906 	br	10c20 <__flash_rwdata_start+0xfffffed8>

00010c3c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10c3c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10c40:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10c44:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10c48:	0010c680 	call	10c68 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10c4c:	0010c880 	call	10c88 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10c50:	d1a01817 	ldw	r6,-32672(gp)
   10c54:	d1601917 	ldw	r5,-32668(gp)
   10c58:	d1201a17 	ldw	r4,-32664(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   10c5c:	dfc00017 	ldw	ra,0(sp)
   10c60:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10c64:	001082c1 	jmpi	1082c <main>

00010c68 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10c68:	deffff04 	addi	sp,sp,-4
   10c6c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
   10c70:	0010d080 	call	10d08 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10c74:	00800044 	movi	r2,1
   10c78:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10c7c:	dfc00017 	ldw	ra,0(sp)
   10c80:	dec00104 	addi	sp,sp,4
   10c84:	f800283a 	ret

00010c88 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10c88:	f800283a 	ret

00010c8c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10c8c:	f800283a 	ret

00010c90 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10c90:	f800283a 	ret

00010c94 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   10c94:	213ffe84 	addi	r4,r4,-6
   10c98:	008003c4 	movi	r2,15
   10c9c:	11001636 	bltu	r2,r4,10cf8 <alt_exception_cause_generated_bad_addr+0x64>
   10ca0:	200890ba 	slli	r4,r4,2
   10ca4:	00800074 	movhi	r2,1
   10ca8:	10832e04 	addi	r2,r2,3256
   10cac:	2089883a 	add	r4,r4,r2
   10cb0:	20800017 	ldw	r2,0(r4)
   10cb4:	1000683a 	jmp	r2
   10cb8:	00010d00 	call	10d0 <__alt_stack_base+0xf1c>
   10cbc:	00010d00 	call	10d0 <__alt_stack_base+0xf1c>
   10cc0:	00010cf8 	rdprs	zero,zero,1075
   10cc4:	00010cf8 	rdprs	zero,zero,1075
   10cc8:	00010cf8 	rdprs	zero,zero,1075
   10ccc:	00010d00 	call	10d0 <__alt_stack_base+0xf1c>
   10cd0:	00010cf8 	rdprs	zero,zero,1075
   10cd4:	00010cf8 	rdprs	zero,zero,1075
   10cd8:	00010d00 	call	10d0 <__alt_stack_base+0xf1c>
   10cdc:	00010d00 	call	10d0 <__alt_stack_base+0xf1c>
   10ce0:	00010cf8 	rdprs	zero,zero,1075
   10ce4:	00010d00 	call	10d0 <__alt_stack_base+0xf1c>
   10ce8:	00010cf8 	rdprs	zero,zero,1075
   10cec:	00010cf8 	rdprs	zero,zero,1075
   10cf0:	00010cf8 	rdprs	zero,zero,1075
   10cf4:	00010d00 	call	10d0 <__alt_stack_base+0xf1c>
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   10cf8:	0005883a 	mov	r2,zero
   10cfc:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   10d00:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   10d04:	f800283a 	ret

00010d08 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   10d08:	000170fa 	wrctl	ienable,zero
   10d0c:	f800283a 	ret
